name: Beholder HID Bot CD

on:
  workflow_dispatch:
  push:
    branches: 
      - master
    paths:
      - 'beholder-hid-bot/**'
      - '!beholder-hid-bot/README.md'
      - '!beholder-hid-bot/docs/**'

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      working-directory: ./beholder-hid-bot
      cache-key: beholder-hid-bot-pr
    
    defaults:
      run:
        shell: bash
        working-directory: ${{ env.working-directory }}

    strategy:
      matrix:
        dotnet-version: ['6.x']

    steps:
      -
        uses: actions/checkout@v2
      - 
        name: Setup .NET Core SDK ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
      - 
        name: Install dependencies
        run: dotnet restore --runtime linux-arm64
      - 
        name: Build
        run: dotnet publish --configuration Release --no-restore --runtime linux-arm64 --no-self-contained
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: beholder-hid-bot-arm64
          path: ${{ github.workspace }}/beholder-hid-bot/bin/Release/net6.0/linux-arm64/publish/
      - 
        name: include OTG files
        run: 'mkdir -p ${{ github.workspace }}/beholder-hid-bot/bin/Release/net6.0/linux-arm64/publish/beholder-otg && cp ${{ github.workspace }}/beholder-otg/*.* ${{ github.workspace }}/beholder-hid-bot/bin/Release/net6.0/linux-arm64/publish/beholder-otg || :'
      - 
        name: include scripts
        run: 'cp ${{ github.workspace }}/beholder-hid-bot/*.sh ${{ github.workspace }}/beholder-hid-bot/bin/Release/net6.0/linux-arm64/publish/ || :'
      - 
        name: compress artifacts
        run: tar -czvf beholder-hid-bot-arm64.tar.gz -C ${{ github.workspace }}/beholder-hid-bot/bin/Release/net6.0/linux-arm64/publish/ .
      -
        name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: CD Build
          body: Continuous Delivery Build
          tag_name: cd-prerelease
          prerelease: true
          files: |
            beholder-hid-bot/beholder-hid-bot-arm64.tar.gz
            docker-compose.yml
  docker:
    runs-on: ubuntu-latest
    env:
      working-directory: ./beholder-hid-bot
      cache-key: beholder-hid-bot-docker-cd

    defaults:
      run:
        shell: bash
        working-directory: ${{ env.working-directory }}

    steps:
      -
        uses: actions/checkout@v2
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: beholderrpa/beholder-hid-bot
          flavor: |
            latest=auto
            prefix=
            suffix=
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      -
        name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-${{ env.cache-key }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-key }}-buildx-
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file:  ${{ env.working-directory }}/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      